{"version":3,"sources":["logo.svg","QRCodeScanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QRCodeScanner","require","createCanvas","props","state","delay","result","jsonData","displayScanner","cameraView","deviceId","facingMode","legacyMode","cameraList","handleChangeCamera","bind","handleFacingModeChange","handleScan","handleError","handleLoad","data","this","setState","getJsonFormatData","_props","onLoad","preview","els","play","timeout","setTimeout","check","removeEventListener","handleLoadStart","e","target","value","res","split","console","log","email_id","phone","adderss_res","image_res","address","extractJsonData","Name","Email","Phone","Address","Website","image","r","g","b","ctx","refs","canvas","getContext","image_rgb","i","length","j","fillStyle","fillRect","x","y","width","height","err","error","onClick","onClickCapture","className","style","onError","onScan","ref","window","location","reload","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7fca627a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\n//import  CameraList  from \"./CameraList\";\r\nconst { createCanvas } = require('canvas');\r\n\r\n\r\nclass QRCodeScanner extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      delay: 300,\r\n      result: 'No result',\r\n      jsonData: [],\r\n      displayScanner: true,\r\n      cameraView:'rear',\r\n      deviceId:'',\r\n      facingMode:'rear',\r\n      legacyMode:false,\r\n      cameraList:[]\r\n    }\r\n    this.handleChangeCamera = this.handleChangeCamera.bind(this);\r\n    this.handleFacingModeChange = this.handleFacingModeChange.bind(this);\r\n    this.handleScan = this.handleScan.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n    this.handleLoad = this.handleLoad.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    // if(!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n    //   //alert(\"enumerateDevices() not supported.\");\r\n    //   //return;\r\n    // }\r\n    // let self =this;\r\n    // navigator.mediaDevices.enumerateDevices()\r\n    // .then(function(devices) {\r\n    //   let deviceNo = 1;\r\n    //   devices.forEach(function(device) {\r\n\r\n    //     if(device.kind=='videoinput')\r\n    //     {\r\n\r\n    //         let deviceList = {name:'Camera '+deviceNo, id:device.deviceId};\r\n    //         deviceNo++;\r\n    //         self.setState({cameraList:self.state.cameraList.concat(deviceList)});\r\n    //     }\r\n    //   });\r\n    // });\r\n\r\n\r\n  }\r\n  handleScan(data){\r\n    // console.log(data)\r\n    if(data != null){\r\n      this.setState({\r\n        result: data,\r\n        delay: false,\r\n      });\r\n      this.getJsonFormatData(data);\r\n    }\r\n\r\n  }\r\n  handleLoad(){\r\n    var _props = this.props,\r\n\t          delay = _props.delay,\r\n\t          onLoad = _props.onLoad;\r\n\r\n\t      var preview = this.els.preview;\r\n\t      preview.play();\r\n\r\n\t      if (typeof onLoad == 'function') {\r\n\t        onLoad();\r\n\t      }\r\n\r\n\t      if (typeof delay == 'number') {\r\n\t        this.timeout = setTimeout(this.check, delay);\r\n\t      }\r\n\r\n\t      // Some browsers call loadstart continuously\r\n\t      preview.removeEventListener('loadstart', this.handleLoadStart);\r\n\r\n  }\r\n\r\n  handleChangeCamera(e){\r\n    this.setState({deviceId:e.target.value});\r\n\r\n  }\r\n  handleFacingModeChange(e){\r\n    //alert(e.target.value);\r\n    this.setState({facingMode:e.target.value});\r\n  }\r\n  getJsonFormatData(data){\r\n    const res = data.split(',');\r\n    console.log(data);\r\n    let email_id = res[3].split(': ');\r\n    let phone = res[2].split(': ');\r\n    let adderss_res = res[4].split(': ');\r\n    let image_res = res[9].split('Powerful');\r\n    let address = adderss_res[1]+ ',' + res[5]+ ',' + res[6]+ ',' + res[7];\r\n    let extractJsonData = {Name:res[0], Email:email_id[1], Phone:phone[1], Address:address, Website:res[8], image: image_res[1]};\r\n    this.setState({jsonData: extractJsonData, displayScanner: false});\r\n    const ctx = this.refs.canvas.getContext('2d');\r\n        // ctx.clearRect(300,300, 300, 300);\r\n        var r, g, b;\r\n        const image_rgb = this.state.jsonData.image;\r\n        // console.log(image_rgb);\r\n        for (var i = 0; i < image_rgb.length; i++) {\r\n            for (var j = 0; j < image_rgb[0].length; j++) {\r\n                r = image_rgb[i][j][0];\r\n                g = image_rgb[i][j][1];\r\n                b = image_rgb[i][j][2];\r\n                ctx.fillStyle = \"rgba(\" + r + \",\" + g + \",\" + b + \", 1)\";\r\n                ctx.fillRect(j, i, 1, 1);\r\n                // console.log(i)\r\n            }\r\n        }\r\n        console.log(\"complete\");\r\n        // this.rect({ctx, x: 10, y: 10, width: 50, height: 50});\r\n        // this.rect({ctx, x: 110, y: 110, width: 50, height: 50});\r\n    // const canvas = createCanvas(200, 200);\r\n    // const ctx = canvas.getContext('2d', { pixelFormat: 'A8' });\r\n    // console.log(ctx.putImageData(image_res[1]);\r\n  }\r\nrect(props) {\r\n    const {ctx, x, y, width, height} = props;\r\n    ctx.fillRect(x, y, width, height);\r\n}\r\n  handleError(err){\r\n    console.error(err);\r\n  }\r\n  render(){\r\n    const previewStyle = {\r\n      height: '100%',\r\n      width: '100%',\r\n    }\r\n\r\n    return(\r\n      <div>\r\n\r\n\r\n        <p>\r\n        <button onClick={this.handleFacingModeChange} onClickCapture={this.handleFacingModeChange} value=\"rear\">Back Camera</button>\r\n        &nbsp;&nbsp;&nbsp;\r\n        <button onClick={this.handleFacingModeChange} onClickCapture={this.handleFacingModeChange} value=\"front\">Front Camera</button>\r\n\r\n        </p>\r\n        {/* <select onChange={this.handleFacingModeChange}>\r\n          <option value=\"front\">Front Camera</option>\r\n          <option value=\"rear\">Back Camera</option>\r\n        </select> */}\r\n        {/* <select onChange={this.handleChangeCamera}>\r\n\r\n          {this.state.cameraList.map((row) => (<option key={row.id} value={row.id}>{row.name}</option>))}\r\n        </select> */}\r\n        {/* <p>If camera not supported</p>\r\n        <input type=\"button\" value=\"Submit QR Code\" onClick={this.openImageDialog} /> */}\r\n        {\r\n          this.state.displayScanner ?\r\n            <div className=\"text-center col-md-auto justify-content-center\">\r\n              <div>\r\n\r\n\r\n              </div>\r\n              <QrReader\r\n                delay={this.state.delay}\r\n                style={previewStyle}\r\n                onError={this.handleError}\r\n                onScan={this.handleScan}\r\n                facingMode={this.state.facingMode}\r\n\t              legacyMode= {this.state.legacyMode}\r\n\t              ref= 'reader'\r\n              />\r\n            </div>\r\n          :\r\n          <div>\r\n            <hr />\r\n            <p><button onClick={()=>window.location.reload()}>Scan Again</button></p>\r\n            <hr />\r\n            <p>{this.state.result}</p>\r\n            <div className=\"table-responsive\">\r\n              <div className=\"col-12 col-sm-12 col-md-8 col-lg-6 m-auto\">\r\n                <table className=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Name</td>\r\n                      <td>{this.state.jsonData.Name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Email</td>\r\n                      <td>{this.state.jsonData.Email}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Phone</td>\r\n                      <td>{this.state.jsonData.Phone}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Address</td>\r\n                      <td>{this.state.jsonData.Address}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Website</td>\r\n                      <td>{this.state.jsonData.Website}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Image</td>\r\n                      <td><canvas ref=\"canvas\" width={300} height={300}/></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QRCodeScanner;\r\n","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport QRCodeScanner from './QRCodeScanner';\r\n//import QRCodeReader from './QRCodeReader';\r\n\r\nclass App extends Component {\r\n  render() {\r\n  return (\r\n    <div className=\"App mt-5\">\r\n      <h2> QR Code Scanner </h2>\r\n      <QRCodeScanner />\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}