{"version":3,"sources":["logo.svg","QRCodeScanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QRCodeScanner","require","createCanvas","props","state","delay","result","jsonData","displayScanner","cameraView","handleChangeCamera","bind","handleScan","handleError","data","this","setState","getJsonFormatData","e","target","value","res","split","console","log","email_id","phone","adderss_res","image_res","address","extractJsonData","Name","Email","Phone","Address","Website","image","err","error","className","onChange","onClick","openImageDialog","style","height","width","onError","onScan","facingMode","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,gKCoH5BC,GAlHUC,EAAQ,IAAzBC,a,kDAGN,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IACPC,OAAQ,YACRC,SAAU,GACVC,gBAAgB,EAChBC,WAAW,QAGb,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAZH,E,uDAcPG,GACE,MAARA,IACDC,KAAKC,SAAS,CACZV,OAAQQ,EACRT,OAAO,IAETU,KAAKE,kBAAkBH,M,yCAIRI,GACjBH,KAAKC,SAAS,CAACP,WAAWS,EAAEC,OAAOC,U,wCAEnBN,GAChB,IAAMO,EAAMP,EAAKQ,MAAM,KACvBC,QAAQC,IAAIH,GACZ,IAAII,EAAWJ,EAAI,GAAGC,MAAM,MACxBI,EAAQL,EAAI,GAAGC,MAAM,MACrBK,EAAcN,EAAI,GAAGC,MAAM,MAC3BM,EAAYP,EAAI,GAAGC,MAAM,YACzBO,EAAUF,EAAY,GAAI,IAAMN,EAAI,GAAI,IAAMA,EAAI,GAAI,IAAMA,EAAI,GAChES,EAAkB,CAACC,KAAKV,EAAI,GAAIW,MAAMP,EAAS,GAAIQ,MAAMP,EAAM,GAAIQ,QAAQL,EAASM,QAAQd,EAAI,GAAIe,MAAOR,EAAU,IACzHb,KAAKC,SAAS,CAACT,SAAUuB,EAAiBtB,gBAAgB,M,kCAKhD6B,GACVd,QAAQe,MAAMD,K,+BAQd,OACE,6BAEItB,KAAKX,MAAMI,eACT,yBAAK+B,UAAU,kDACb,6BACA,4BAAQC,SAAUzB,KAAKL,oBACrB,4BAAQU,MAAM,SAAd,gBACA,4BAAQA,MAAM,QAAd,gBAEF,4BAAQqB,QAAS1B,KAAK2B,iBAAtB,SAEA,kBAAC,IAAD,CACErC,MAAOU,KAAKX,MAAMC,MAClBsC,MAnBS,CACnBC,OAAQ,OACRC,MAAO,QAkBGC,QAAS/B,KAAKF,YACdkC,OAAQhC,KAAKH,WACboC,WAAYjC,KAAKN,cAMrB,yBAAK8B,UAAU,oBACb,yBAAKA,UAAU,6CACb,2BAAOA,UAAU,wBACf,+BACE,4BACE,oCACA,4BAAKxB,KAAKX,MAAMG,SAASwB,OAE3B,4BACE,qCACA,4BAAKhB,KAAKX,MAAMG,SAASyB,QAE3B,4BACE,qCACA,4BAAKjB,KAAKX,MAAMG,SAAS0B,QAE3B,4BACE,uCACA,4BAAKlB,KAAKX,MAAMG,SAAS2B,UAE3B,4BACE,uCACA,4BAAKnB,KAAKX,MAAMG,SAAS4B,UAE3B,4BACE,qCACA,uC,GApGMc,cCSbC,MATf,WACE,OACE,yBAAKX,UAAU,YACb,iDACA,kBAAC,EAAD,QCIcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLf,QAAQe,MAAMA,EAAM8B,c","file":"static/js/main.c6b4dde0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\nconst { createCanvas } = require('canvas');\r\n\r\nclass QRCodeScanner extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      delay: 300,\r\n      result: 'No result',\r\n      jsonData: [],\r\n      displayScanner: true,\r\n      cameraView:'rear'\r\n    }\r\n\r\n    this.handleChangeCamera = this.handleChangeCamera.bind(this);\r\n    this.handleScan = this.handleScan.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n  }\r\n  handleScan(data){\r\n    if(data != null){\r\n      this.setState({\r\n        result: data,\r\n        delay: false,\r\n      });\r\n      this.getJsonFormatData(data);\r\n    }\r\n\r\n  }\r\n  handleChangeCamera(e){\r\n    this.setState({cameraView:e.target.value});\r\n  }\r\n  getJsonFormatData(data){\r\n    const res = data.split(',');\r\n    console.log(res);\r\n    let email_id = res[3].split(': ');\r\n    let phone = res[2].split(': ');\r\n    let adderss_res = res[4].split(': ');\r\n    let image_res = res[9].split('Powerful');\r\n    let address = adderss_res[1]+ ',' + res[5]+ ',' + res[6]+ ',' + res[7];\r\n    let extractJsonData = {Name:res[0], Email:email_id[1], Phone:phone[1], Address:address, Website:res[8], image: image_res[1]};\r\n    this.setState({jsonData: extractJsonData, displayScanner: false});\r\n    // const canvas = createCanvas(200, 200);\r\n    // const ctx = canvas.getContext('2d', { pixelFormat: 'A8' });\r\n    // console.log(ctx.putImageData(image_res[1]);\r\n  }\r\n  handleError(err){\r\n    console.error(err);\r\n  }\r\n  render(){\r\n    const previewStyle = {\r\n      height: '100%',\r\n      width: '100%',\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        {\r\n          this.state.displayScanner ?\r\n            <div className=\"text-center col-md-auto justify-content-center\">\r\n              <div>\r\n              <select onChange={this.handleChangeCamera}>\r\n                <option value=\"front\">Front Camera</option>\r\n                <option value=\"rear\">Rear Camera</option>\r\n              </select>\r\n              <button onClick={this.openImageDialog}>Open</button>\r\n              </div>\r\n              <QrReader\r\n                delay={this.state.delay}\r\n                style={previewStyle}\r\n                onError={this.handleError}\r\n                onScan={this.handleScan}\r\n                facingMode={this.cameraView}\r\n                \r\n                />\r\n            </div>\r\n          :\r\n            // <p>{this.state.jsonData.Name}</p>\r\n            <div className=\"table-responsive\">\r\n              <div className=\"col-12 col-sm-12 col-md-8 col-lg-6 m-auto\">\r\n                <table className=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Name</td>\r\n                      <td>{this.state.jsonData.Name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Email</td>\r\n                      <td>{this.state.jsonData.Email}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Phone</td>\r\n                      <td>{this.state.jsonData.Phone}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Address</td>\r\n                      <td>{this.state.jsonData.Address}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Website</td>\r\n                      <td>{this.state.jsonData.Website}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Image</td>\r\n                      <td></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QRCodeScanner;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport QRCodeScanner from './QRCodeScanner';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App mt-5\">\r\n      <h2> QR Code Scanner </h2>\r\n      <QRCodeScanner />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}