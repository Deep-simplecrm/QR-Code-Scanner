{"version":3,"sources":["logo.svg","QRCodeScanner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","QRCodeScanner","require","createCanvas","props","state","delay","result","jsonData","displayScanner","handleScan","bind","handleError","data","this","setState","getJsonFormatData","res","split","console","log","email_id","phone","adderss_res","image_res","address","extractJsonData","Name","Email","Phone","Address","Website","image","err","error","className","style","height","width","objectFit","onError","onScan","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,gKCuG5BC,GArGUC,EAAQ,IAAzBC,a,kDAGN,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IACPC,OAAQ,YACRC,SAAU,GACVC,gBAAgB,GAGlB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVH,E,uDAYPE,GACE,MAARA,IACDC,KAAKC,SAAS,CACZR,OAAQM,EACRP,OAAO,IAETQ,KAAKE,kBAAkBH,M,wCAITA,GAChB,IAAMI,EAAMJ,EAAKK,MAAM,KACvBC,QAAQC,IAAIH,GACZ,IAAII,EAAWJ,EAAI,GAAGC,MAAM,MACxBI,EAAQL,EAAI,GAAGC,MAAM,MACrBK,EAAcN,EAAI,GAAGC,MAAM,MAC3BM,EAAYP,EAAI,GAAGC,MAAM,YACzBO,EAAUF,EAAY,GAAI,IAAMN,EAAI,GAAI,IAAMA,EAAI,GAAI,IAAMA,EAAI,GAChES,EAAkB,CAACC,KAAKV,EAAI,GAAIW,MAAMP,EAAS,GAAIQ,MAAMP,EAAM,GAAIQ,QAAQL,EAASM,QAAQd,EAAI,GAAIe,MAAOR,EAAU,IACzHV,KAAKC,SAAS,CAACP,SAAUkB,EAAiBjB,gBAAgB,M,kCAKhDwB,GACVd,QAAQe,MAAMD,K,+BASd,OACE,6BAEInB,KAAKT,MAAMI,eACT,yBAAK0B,UAAU,yDACb,kBAAC,IAAD,CACE7B,MAAOQ,KAAKT,MAAMC,MAClB8B,MAbS,CACnBC,OAAQ,IACRC,MAAO,IACPC,UAAU,QAWAC,QAAS1B,KAAKF,YACd6B,OAAQ3B,KAAKJ,cAKjB,yBAAKyB,UAAU,oBACb,yBAAKA,UAAU,6CACb,2BAAOA,UAAU,wBACf,+BACE,4BACE,oCACA,4BAAKrB,KAAKT,MAAMG,SAASmB,OAE3B,4BACE,qCACA,4BAAKb,KAAKT,MAAMG,SAASoB,QAE3B,4BACE,qCACA,4BAAKd,KAAKT,MAAMG,SAASqB,QAE3B,4BACE,uCACA,4BAAKf,KAAKT,MAAMG,SAASsB,UAE3B,4BACE,uCACA,4BAAKhB,KAAKT,MAAMG,SAASuB,UAE3B,4BACE,qCACA,uC,GAvFMW,cCSbC,MATf,WACE,OACE,yBAAKR,UAAU,YACb,iDACA,kBAAC,EAAD,QCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLf,QAAQe,MAAMA,EAAM2B,c","file":"static/js/main.46167ae0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\nconst { createCanvas } = require('canvas');\r\n\r\nclass QRCodeScanner extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      delay: 300,\r\n      result: 'No result',\r\n      jsonData: [],\r\n      displayScanner: true,\r\n    }\r\n\r\n    this.handleScan = this.handleScan.bind(this);\r\n    this.handleError = this.handleError.bind(this);\r\n  }\r\n  handleScan(data){\r\n    if(data != null){\r\n      this.setState({\r\n        result: data,\r\n        delay: false,\r\n      });\r\n      this.getJsonFormatData(data);\r\n    }\r\n\r\n  }\r\n  getJsonFormatData(data){\r\n    const res = data.split(',');\r\n    console.log(res);\r\n    let email_id = res[3].split(': ');\r\n    let phone = res[2].split(': ');\r\n    let adderss_res = res[4].split(': ');\r\n    let image_res = res[9].split('Powerful');\r\n    let address = adderss_res[1]+ ',' + res[5]+ ',' + res[6]+ ',' + res[7];\r\n    let extractJsonData = {Name:res[0], Email:email_id[1], Phone:phone[1], Address:address, Website:res[8], image: image_res[1]};\r\n    this.setState({jsonData: extractJsonData, displayScanner: false});\r\n    // const canvas = createCanvas(200, 200);\r\n    // const ctx = canvas.getContext('2d', { pixelFormat: 'A8' });\r\n    // console.log(ctx.putImageData(image_res[1]);\r\n  }\r\n  handleError(err){\r\n    console.error(err);\r\n  }\r\n  render(){\r\n    const previewStyle = {\r\n      height: 200,\r\n      width: 400,\r\n      objectFit:'fill',\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        {\r\n          this.state.displayScanner ?\r\n            <div className=\"text-center col-md-auto justify-content-center d-flex\">\r\n              <QrReader\r\n                delay={this.state.delay}\r\n                style={previewStyle}\r\n                onError={this.handleError}\r\n                onScan={this.handleScan}\r\n                />\r\n            </div>\r\n          :\r\n            // <p>{this.state.jsonData.Name}</p>\r\n            <div className=\"table-responsive\">\r\n              <div className=\"col-12 col-sm-12 col-md-8 col-lg-6 m-auto\">\r\n                <table className=\"table table-bordered\">\r\n                  <tbody>\r\n                    <tr>\r\n                      <td>Name</td>\r\n                      <td>{this.state.jsonData.Name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Email</td>\r\n                      <td>{this.state.jsonData.Email}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Phone</td>\r\n                      <td>{this.state.jsonData.Phone}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Address</td>\r\n                      <td>{this.state.jsonData.Address}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Website</td>\r\n                      <td>{this.state.jsonData.Website}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Image</td>\r\n                      <td></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QRCodeScanner;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport QRCodeScanner from './QRCodeScanner';\nfunction App() {\n  return (\n    <div className=\"App mt-5\">\n      <h2> QR Code Scanner </h2>\n      <QRCodeScanner />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}